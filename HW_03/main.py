#Напишите приложение, которое будет запрашивать у пользователя следующие данные в произвольном порядке, разделенные пробелом:
#Фамилия Имя Отчество датарождения номертелефона пол

#Форматы данных:
#фамилия, имя, отчество - строки
#датарождения - строка формата dd.mm.yyyy
#номертелефона - целое беззнаковое число без форматирования
#пол - символ латиницей f или m.

#Приложение должно проверить введенные данные по количеству. Если количество не совпадает с требуемым, вернуть код ошибки, обработать его и показать пользователю сообщение, что он ввел меньше и больше данных, чем требуется.

#Приложение должно попытаться распарсить полученные значения и выделить из них требуемые параметры. Если форматы данных не совпадают, нужно бросить исключение, соответствующее типу проблемы. Можно использовать встроенные типы java и создать свои. Исключение должно быть корректно обработано, пользователю выведено сообщение с информацией, что именно неверно.

#Если всё введено и обработано верно, должен создаться файл с названием, равным фамилии, в него в одну строку должны записаться полученные данные, вида

#<Фамилия><Имя><Отчество><датарождения> <номертелефона><пол>

#Однофамильцы должны записаться в один и тот же файл, в отдельные строки.

#Не забудьте закрыть соединение с файлом.

#При возникновении проблемы с чтением-записью в файл, исключение должно быть корректно обработано, пользователь должен увидеть стектрейс ошибки.

import datetime

class DataError(Exception):
    pass

data_str = input("Введите Фамилию, Имя , Отчество, дату рождения формата yyyy-mm-dd, номер телефона, пол через пробел \n")
data = data_str.split(" ")

if len(data)!=6:
    raise DataError('введено не верное количество полей')

try:
    datetime.date.fromisoformat(data[3])
except ValueError:
    raise DataError("неверный формат даты , должен быть  YYYY-MM-DD")

if not data[4].isdigit():
    raise DataError("неверный формат телефона")

if data[5] == "f" or data[5] == "m":
    pass
else:
    raise DataError("неверный пол")

try:
    with open(data[0], 'a') as fileToSave:
        fileToSave.write(data_str+"\n")
except:
    raise DataError("невозмжно записать файл")